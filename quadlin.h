/**@file */
#ifndef QUAD_H
#define QUAD_H

static const double EPS_COEF = 1e-7;

enum root_count {OVERFLOW_ERR = -2, INF_ROOTS, ZERO_ROOTS, ONE_ROOT, TWO_ROOTS};

/**
 * Структура для хранения решений квадратного уравнения
 * Состоит из:
 * int count - количество корней
 * double x1 - первый корень (0 если корней 0)
 * double x2 - второй корень (0 если корней 0 или 1)
 */
struct quad
{
    int count;
    double x1;
    double x2;
};
/**
 * Структура для хранения решений квадратного уравнения
 * Состоит из:
 * int count - количество корней
 * double x - корень (0 если корней 0)
 */
struct lin
{
    int count;
    double x;
};

/**
 *Функция для решения квадратного уравнения
 *
 * \param a, b, c {коэффициенты квадратного уравнения}
 * \param root_sig_count {точность корней (знаки после запятой)}
 * \return структуру quad, содержащую количество корней и их значения.
 * Если корень 1, то его значение содержится в x1. Если корней <2, то остальные корни нули.
 * Корни упорядочены по возрастанию
*/
struct quad quad_solve(double a, double b, double c, int root_sign_count);//функция, которая решает уравнение и возвращает количество корней
/**
Функция для решения линейного уравнения.
 * \param k, b {коэффициенты линейного уравнения}
 * \return структуру lin, содержащую количество корней и значения. Если корней бесконечно или 0, корень нулевой.
*/
struct lin lin_solve(double k, double b);
/**
 * функция для сравнения даблов с заданной точностью
 * \param a, b {сравниваемые чиса}
 * \param eps {точность сравнения}
 * \return -1 если a<b; 0 если a=b; +1 если a>b
*/
int cmpdoubles(double a, double b, double eps);//функция для сравнения даблов с заданной точностью
#endif
